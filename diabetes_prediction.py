# -*- coding: utf-8 -*-
"""diabetes_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VW5yNApvN_g_xf6kjscKwvzFGq3DXWyk
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics  import accuracy_score
from sklearn.model_selection import train_test_split

#loading dataset
df=pd.read_csv('/content/diabetes.csv')

df.head()

df.info()

df.shape

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

x=df.iloc[:,:-1]
x

y=df.iloc[:,-1]   #y=df.iloc[:,-1]
y

#standardiztion
scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

x = standardized_data
y = df['Outcome']

print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, stratify=y, random_state=2)

classifier = svm.SVC(kernel='linear')

#training the support vector Machine Classifier
classifier.fit(x_train, y_train)

# accuracy score on the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
training_data_accuracy

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
test_data_accuracy

#making predictive system
input_data = (2,108,52,26,63,32.5,0.318,22)
# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)
# reshape the array 
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')